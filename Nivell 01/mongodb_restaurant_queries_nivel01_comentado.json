/*

PROCEDIMIENTO

1-(abrir símbolo del sistema)
2-cd / (sirve para ir a C:)
3-cd program files, cd mongodb, cd server, cd 4.4, cd bin (sirve para acceder a la carpeta)
4-mongod (sirve para ejecutar el programa)
5-(copy paste del connection string del cloud.mongodb.com, para conectar mis db que he generado desde mongocompass, cargando el json del moodle)
6-(meter el password que solicita)
7-diferentes comandos útiles:
	show dbs (sirve para mostrar las db que tenemos)
	show users (sirve para mostrar los usuarios)
	use restaurant (sirve para usar una determinada db o colección, en este caso se llama "restaurant" y este nombre se repetirá en los comandos de las queries)
8-ya se pueden empezar a escribir las queries ;)


SISTEMA DE VERIFICACIÓN

Pasamos la db "Restaurants" a un Excel
Link: https://docs.google.com/spreadsheets/d/1ikwOPhKdQ9Uvr-iN15B3p2nSiop6bYLvJ9_nU7p1z_A/edit#gid=1243660638
Este Excel nos permitirá comprobar los resultados de las queries
Mediante filtros y fórmulas en diferentes pestañas
*/


//Seleccionar la DB correspondiente.
use restaurant


/*

QUERIES

NIVEL 1

*/

//1.01. Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants
db.restaurant.find( {} )
//.count() = 3772 (correcto, comprobado en Excel)

//1.02. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine per tots els documents en la col·lecció Restaurants
//Ojo que el _id y el restaurant_id no son lo mismo.
//El _id no está especificado pero lo incluye igual.
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty()
//.count() = 3772 (correcto, comprobado en Excel)

//1.03. Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloure el camp _id per tots els documents en la col·lecció Restaurants
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty()
//.count() = 3772 (correcto, comprobado en Excel)

//1.04. Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloure el camp _id per tots els documents en la col·lecció Restaurants
//Ojo que el campo zipcode está anidado dentro del campo address y cambia la sintaxis.
//Ojo que zipcode:1 y zipcode:true no nos devuelve el campo completo. No sé resolver esto. 
//Primero pensé que lo tomaba como una restricción pero con .count() se comprueba que devuelve todas las filas.
db.restaurant.find({},{name:1,borough:1,"address.zipcode":1,_id:0}).pretty()
//.count() = 3772 (correcto, comprobado en Excel)

//1.05. Escriu una consulta per mostrar tot els restaurants que estan en el Bronx
db.restaurant.find({borough:"Bronx"}).pretty()
//.count() = 309 (correcto, comprobado en Excel)

//1.06. Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx
//La función .sort no es imprescindible pero hace que la consulta sea más robusta
db.restaurant.find({name:{$ne:""},borough:"Bronx"}).sort({restaurant_id:1}).limit(5).pretty()
//.count() = 309 (todos los del Bronx), ignorando .limit(5) 
//Pero es correcto. Si nos fijamos en el resultado de la anterior solo printa 5 y no ofrece "press it" para printar más.

//1.07. Escriu una consulta per mostrar el pròxim 5 restaurants després de saltar els primers 5 del Bronx
//La función .sort no es imprescindible pero hace que la consulta sea más robusta
//Comprobado que los resultados de esta query son distintos a la query anteiror
db.restaurant.find({name:{$ne:""},borough:"Bronx"}).sort({restaurant_id:1}).skip(5).limit(5).pretty()
//.count() = 309 (todos los del Bronx), ignorando .limit(5) 
//Pero es correcto. Si nos fijamos en el resultado de la anterior solo printa 5 y no ofrece "press it" para printar más.

//1.08. Escriu una consulta per trobar els restaurants que tenen un score de més de 90
db.restaurant.find({"grades.score": {"$gt": 90}}).pretty()
//.count() = 3 (correcto, comprobado en Excel)

//1.09. Escriu una consulta per trobar els restaurants que tenen un score de més que 80 però menys que 100
db.restaurant.find({"grades.score": {"$gt": 80, "$lt": 100}}).pretty()
//.count() = 4 (correcto, comprobado en Excel)

//1.10. Escriu una consulta per trobar els restaurants quins localitzen en valor de latitud menys que -95.754168

//Las coordenadas se guardan [longitud,latitud]
//Query contra "address.coord.1"
//Link: https://docs.mongodb.com/manual/geospatial-queries

/*

Ver fichero latitude-explained.txt

		Latitud menor = más cerca del Ecuador
		Ejemplo: -80º tiene menos latitud que -95º
		-80>-95
		Latitud menor = número mayor
		¡PERO SOLO EN EL HEMISFERIO SUR!
		Usamos $gt
*/

db.restaurant.find({"address.coord.1": {"$gt": -95.754168}}).pretty()
//count() = 3772 (correcto, comprobado en Excel)
//Es lógico: todos los registros de la tabla tienen una "menor latitud" a -95.754168 

//1.11. Escriu una consulta de MongoDB per a trobar els restaurants que no preparen cap cuisine de 'American' i el seu puntaje de qualificació superior a 70 i latitud inferior a -65.754168
//Ojo que la palabra "American" tiene un espacio detrás y la búsqueda hay que hacerla por "American "
db.restaurant.find({"cuisine":"American ","grades.score": {"$gt": 70},"address.coord.1": {"$gt": -65.754168}}).pretty()
//count() = 4 (correcto, comprobado en Excel)

//1.12. Escriu una consulta per trobar els restaurants quins no preparen cap cuisine de 'American' i va aconseguir un marcador més que 70 i localitzat en la longitud menys que -65.754168. Nota : Fes aquesta consulta sense utilitzar $and operador
//Ojo que aquí vuelve aplicarse lo de "American " (con un espacio al final) en lugar de "American" (sin espacio)
db.restaurant.find({"cuisine":{$ne:"American "},"grades.score": {"$gt": 70},"address.coord": {"$gt": -65.754168}}).pretty()
//count() = 5 (correcto, comprobado en Excel)